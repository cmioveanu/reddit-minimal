[{"/mnt/c/Users/Cristian/desktop/projects/reddit-client/src/features/posts/Posts.js":"1","/mnt/c/Users/Cristian/desktop/projects/reddit-client/src/features/posts/comments/Comments.js":"2","/mnt/c/Users/Cristian/desktop/projects/reddit-client/src/features/posts/postFooter/PostFooter.js":"3","/mnt/c/Users/Cristian/desktop/projects/reddit-client/src/features/header/searchBar/SearchBar.js":"4","/mnt/c/Users/Cristian/desktop/projects/reddit-client/src/features/header/Header.js":"5"},{"size":1657,"mtime":1607441046917,"results":"6","hashOfConfig":"7"},{"size":938,"mtime":1607359851833,"results":"8","hashOfConfig":"7"},{"size":2788,"mtime":1607441239665,"results":"9","hashOfConfig":"7"},{"size":682,"mtime":1607436736030,"results":"10","hashOfConfig":"7"},{"size":628,"mtime":1607437256610,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},"1n8s2ol",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/mnt/c/Users/Cristian/desktop/projects/reddit-client/src/features/posts/Posts.js",["24","25","26","27"],"import React from 'react';\r\nimport styles from './Posts.module.css';\r\n\r\nimport { useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { getSubredditPosts } from '../../app/Reddit';\r\n\r\n\r\nimport {PostFooter} from './postFooter/PostFooter';\r\n\r\n\r\n\r\nexport const Posts = () => {\r\n    const activeSub = useSelector(state => state.subreddits.activeSubreddit);\r\n    const dispatch = useDispatch();\r\n\r\n    const [posts, setPosts] = useState([]);\r\n\r\n    useEffect(() => getSubredditPosts(activeSub)\r\n        .then(response => {\r\n            setPosts(response);\r\n        }), [activeSub]);\r\n\r\n    \r\n\r\n    const [clicked, setClicked] = useState(true);\r\n\r\n    \r\n\r\n    return (\r\n        <section className={styles.posts}>\r\n            {posts.map(post => (\r\n                <section className={styles.post} key={post.id}>\r\n                    <div className={styles.likes}>\r\n                        {post.ups}\r\n                    </div>\r\n                    {console.log(post)}\r\n                    <div className={styles.postBody}>\r\n                        <h2>{post.title}</h2>\r\n                        <img src={post.url} onError={(e) => e.target.style.display = \"none\"} />\r\n                        <PostFooter postId={post.id}\r\n                                    postAuthor={post.author}\r\n                                    postCreated={post.created_utc}\r\n                                    postPermalink={post.permalink}\r\n                                    postComments={post.num_comments}/>\r\n                    </div>\r\n                </section>\r\n                \r\n            ))}\r\n        </section>\r\n    );\r\n}","/mnt/c/Users/Cristian/desktop/projects/reddit-client/src/features/posts/comments/Comments.js",[],"/mnt/c/Users/Cristian/desktop/projects/reddit-client/src/features/posts/postFooter/PostFooter.js",["28"],"import React from 'react';\r\nimport {useState} from 'react';\r\n\r\nimport { Comments } from '../comments/Comments';\r\n\r\nimport styles from './PostFooter.module.css';\r\n\r\nexport const PostFooter = (props) => {\r\n    const [active, setActive] = useState(false);\r\n\r\n    const commentsIcon = <svg\r\n        stroke=\"currentColor\"\r\n        fill=\"currentColor\"\r\n        strokeWidth=\"0\"\r\n        version=\"1.2\"\r\n        baseProfile=\"tiny\"\r\n        viewBox=\"0 0 24 24\"\r\n        className=\"icon-action\"\r\n        height=\"1.5rem\"\r\n        width=\"1.5rem\"\r\n        xmlns=\"http://www.w3.org/2000/svg\">\r\n        <path d=\"M18 7c.542 0 1 .458 1 1v7c0 .542-.458 1-1 1h-8.829l-.171.171v-.171h-3c-.542 0-1-.458-1-1v-7c0-.542.458-1 1-1h12m0-2h-12c-1.65 0-3 1.35-3 3v7c0 1.65 1.35 3 3 3h1v3l3-3h8c1.65 0 3-1.35 3-3v-7c0-1.65-1.35-3-3-3z\"></path>\r\n    </svg>;\r\n\r\n    const onCommentsClicked = () => {\r\n        const postComments = document.getElementById(props.postId);\r\n        if(active) {\r\n            postComments.style.display = \"none\";\r\n            setActive(false);\r\n        } else {\r\n            postComments.style.display = \"block\";\r\n            setActive(true);\r\n        }\r\n    }\r\n\r\n    const dateCalculator = () => {\r\n        const currentDate = Date.now();\r\n        const postDate = new Date(props.postCreated *1000);\r\n\r\n        const dateDifferenceInTime = currentDate - postDate;\r\n        \r\n        const dateDifferenceInMonths = dateDifferenceInTime / (1000 * 3600 * 24 * 30.4);\r\n        const dateDifferenceInDays = dateDifferenceInTime / (1000 * 3600 * 24);\r\n        const dateDifferenceInHours = dateDifferenceInTime / (1000 * 3600);\r\n        const dateDifferenceInMinutes = dateDifferenceInTime / (1000 * 60);\r\n\r\n        let chosenDate;\r\n\r\n        if(dateDifferenceInMonths > 12) {\r\n            return \"more than a year ago\";\r\n        } else if(dateDifferenceInMonths >= 1) {\r\n            return Math.round(dateDifferenceInMonths) + \" months ago\";\r\n        } else if(dateDifferenceInDays >= 1) {\r\n            return Math.round(dateDifferenceInDays) + \" days ago\";\r\n        } else if (dateDifferenceInHours >= 1) {\r\n            return Math.round(dateDifferenceInHours) + \" hours ago\";\r\n        } else if(dateDifferenceInMinutes >= 1) {\r\n            return Math.round(dateDifferenceInMinutes) + \" minutes ago\";\r\n        } else {\r\n            return \"less than a minute ago\";\r\n        }\r\n    }\r\n\r\n    return (\r\n        <footer>\r\n            <ul className={styles.postInfos}>\r\n                <li><span>{props.postAuthor}</span></li>\r\n                <li>{dateCalculator()}</li>\r\n                <li onClick={onCommentsClicked}>{commentsIcon}<span>{props.postComments}</span></li>\r\n            </ul>\r\n            <Comments permalink={props.postPermalink} id={props.postId} />\r\n        </footer>\r\n    );\r\n};","/mnt/c/Users/Cristian/desktop/projects/reddit-client/src/features/header/searchBar/SearchBar.js",[],"/mnt/c/Users/Cristian/desktop/projects/reddit-client/src/features/header/Header.js",[],{"ruleId":"29","severity":1,"message":"30","line":16,"column":11,"nodeType":"31","messageId":"32","endLine":16,"endColumn":19},{"ruleId":"29","severity":1,"message":"33","line":27,"column":12,"nodeType":"31","messageId":"32","endLine":27,"endColumn":19},{"ruleId":"29","severity":1,"message":"34","line":27,"column":21,"nodeType":"31","messageId":"32","endLine":27,"endColumn":31},{"ruleId":"35","severity":1,"message":"36","line":41,"column":25,"nodeType":"37","endLine":41,"endColumn":96},{"ruleId":"29","severity":1,"message":"38","line":47,"column":13,"nodeType":"31","messageId":"32","endLine":47,"endColumn":23},"no-unused-vars","'dispatch' is assigned a value but never used.","Identifier","unusedVar","'clicked' is assigned a value but never used.","'setClicked' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'chosenDate' is defined but never used."]