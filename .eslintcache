[{"/mnt/c/Users/Cristian/desktop/projects/reddit-client/src/features/posts/Posts.js":"1","/mnt/c/Users/Cristian/desktop/projects/reddit-client/src/features/posts/comments/Comments.js":"2","/mnt/c/Users/Cristian/desktop/projects/reddit-client/src/features/posts/postFooter/PostFooter.js":"3","/mnt/c/Users/Cristian/desktop/projects/reddit-client/src/features/header/searchBar/SearchBar.js":"4","/mnt/c/Users/Cristian/desktop/projects/reddit-client/src/features/header/Header.js":"5"},{"size":1616,"mtime":1607442102302,"results":"6","hashOfConfig":"7"},{"size":1199,"mtime":1607443110709,"results":"8","hashOfConfig":"7"},{"size":2726,"mtime":1607442783184,"results":"9","hashOfConfig":"7"},{"size":682,"mtime":1607436736030,"results":"10","hashOfConfig":"7"},{"size":628,"mtime":1607437256610,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},"1n8s2ol",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/mnt/c/Users/Cristian/desktop/projects/reddit-client/src/features/posts/Posts.js",["23","24","25","26"],"import React from 'react';\r\nimport styles from './Posts.module.css';\r\n\r\nimport { useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { getSubredditPosts } from '../../app/Reddit';\r\n\r\n\r\nimport {PostFooter} from './postFooter/PostFooter';\r\n\r\n\r\n\r\nexport const Posts = () => {\r\n    const activeSub = useSelector(state => state.subreddits.activeSubreddit);\r\n    const dispatch = useDispatch();\r\n\r\n    const [posts, setPosts] = useState([]);\r\n\r\n    useEffect(() => getSubredditPosts(activeSub)\r\n        .then(response => {\r\n            setPosts(response);\r\n        }), [activeSub]);\r\n\r\n    \r\n\r\n    const [clicked, setClicked] = useState(true);\r\n\r\n    \r\n\r\n    return (\r\n        <section className={styles.posts}>\r\n            {posts.map(post => (\r\n                <section className={styles.post} key={post.id}>\r\n                    <div className={styles.likes}>\r\n                        {post.ups}\r\n                    </div>\r\n                    <div className={styles.postBody}>\r\n                        <h2>{post.title}</h2>\r\n                        <img src={post.url} onError={(e) => e.target.style.display = \"none\"} />\r\n                        <PostFooter postId={post.id}\r\n                                    postAuthor={post.author}\r\n                                    postCreated={post.created_utc}\r\n                                    postPermalink={post.permalink}\r\n                                    postComments={post.num_comments}/>\r\n                    </div>\r\n                </section>\r\n                \r\n            ))}\r\n        </section>\r\n    );\r\n}","/mnt/c/Users/Cristian/desktop/projects/reddit-client/src/features/posts/comments/Comments.js",[],"/mnt/c/Users/Cristian/desktop/projects/reddit-client/src/features/posts/postFooter/PostFooter.js",[],"/mnt/c/Users/Cristian/desktop/projects/reddit-client/src/features/header/searchBar/SearchBar.js",[],"/mnt/c/Users/Cristian/desktop/projects/reddit-client/src/features/header/Header.js",[],{"ruleId":"27","severity":1,"message":"28","line":16,"column":11,"nodeType":"29","messageId":"30","endLine":16,"endColumn":19},{"ruleId":"27","severity":1,"message":"31","line":27,"column":12,"nodeType":"29","messageId":"30","endLine":27,"endColumn":19},{"ruleId":"27","severity":1,"message":"32","line":27,"column":21,"nodeType":"29","messageId":"30","endLine":27,"endColumn":31},{"ruleId":"33","severity":1,"message":"34","line":40,"column":25,"nodeType":"35","endLine":40,"endColumn":96},"no-unused-vars","'dispatch' is assigned a value but never used.","Identifier","unusedVar","'clicked' is assigned a value but never used.","'setClicked' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]