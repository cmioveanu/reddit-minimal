[{"/mnt/c/Users/Cristian/desktop/projects/reddit-client/src/features/posts/Posts.js":"1","/mnt/c/Users/Cristian/desktop/projects/reddit-client/src/features/posts/comments/Comments.js":"2","/mnt/c/Users/Cristian/desktop/projects/reddit-client/src/features/posts/postFooter/PostFooter.js":"3","/mnt/c/Users/Cristian/desktop/projects/reddit-client/src/features/header/searchBar/SearchBar.js":"4","/mnt/c/Users/Cristian/desktop/projects/reddit-client/src/features/header/Header.js":"5","/mnt/c/Users/Cristian/desktop/projects/reddit-client/src/app/utils.js":"6","/mnt/c/Users/Cristian/desktop/projects/reddit-client/src/features/posts/likes/Likes.js":"7","/mnt/c/Users/Cristian/desktop/projects/reddit-client/src/features/header/searchBar/searchBarSlice.js":"8"},{"size":1783,"mtime":1607526227661,"results":"9","hashOfConfig":"10"},{"size":1151,"mtime":1607525853352,"results":"11","hashOfConfig":"10"},{"size":2758,"mtime":1607454154974,"results":"12","hashOfConfig":"10"},{"size":776,"mtime":1607523734919,"results":"13","hashOfConfig":"10"},{"size":628,"mtime":1607437256610,"results":"14","hashOfConfig":"10"},{"size":1456,"mtime":1607520366811,"results":"15","hashOfConfig":"10"},{"size":1876,"mtime":1607524005660,"results":"16","hashOfConfig":"10"},{"size":344,"mtime":1607523688821,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},"1n8s2ol",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/mnt/c/Users/Cristian/desktop/projects/reddit-client/src/features/posts/Posts.js",["35","36"],"import React from 'react';\r\nimport styles from './Posts.module.css';\r\n\r\nimport { useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\n\r\nimport { getSubredditPosts } from '../../app/Reddit';\r\nimport { PostFooter } from './postFooter/PostFooter';\r\nimport { Likes } from './likes/Likes';\r\n\r\n\r\n\r\nexport const Posts = () => {\r\n    const activeSub = useSelector(state => state.subreddits.activeSubreddit);\r\n    const activeSearchInput = useSelector(state => state.search);\r\n\r\n    const [posts, setPosts] = useState([]);\r\n\r\n    useEffect(() => getSubredditPosts(activeSub)\r\n        .then(response => {\r\n            setPosts(response);\r\n        }), [activeSub]);\r\n\r\n    const filteredPosts = posts.filter(post => post.title.toLowerCase().includes(activeSearchInput.toLowerCase()));     //select only posts that include the search bar value\r\n\r\n    return (\r\n        <section className={styles.posts}>\r\n            {filteredPosts.map(post => (\r\n                <section className={styles.post} key={post.id}>\r\n                    <Likes postUps={post.ups} />\r\n\r\n                    <div className={styles.postBody}>\r\n                        <h2>{post.title}</h2>\r\n                        <p>{post.selftext.substring(0, 1000)}</p>\r\n                        <img src={post.url} onError={(e) => e.target.style.display = \"none\"} />\r\n                        <PostFooter postId={post.id}\r\n                            postAuthor={post.author}\r\n                            postCreated={post.created_utc}\r\n                            postPermalink={post.permalink}\r\n                            postComments={post.num_comments}\r\n                        />\r\n                    </div>\r\n                </section>\r\n\r\n            ))}\r\n        </section>\r\n    );\r\n}","/mnt/c/Users/Cristian/desktop/projects/reddit-client/src/features/posts/comments/Comments.js",[],"/mnt/c/Users/Cristian/desktop/projects/reddit-client/src/features/posts/postFooter/PostFooter.js",[],"/mnt/c/Users/Cristian/desktop/projects/reddit-client/src/features/header/searchBar/SearchBar.js",[],"/mnt/c/Users/Cristian/desktop/projects/reddit-client/src/features/header/Header.js",[],"/mnt/c/Users/Cristian/desktop/projects/reddit-client/src/app/utils.js",[],"/mnt/c/Users/Cristian/desktop/projects/reddit-client/src/features/posts/likes/Likes.js",[],"/mnt/c/Users/Cristian/desktop/projects/reddit-client/src/features/header/searchBar/searchBarSlice.js",[],{"ruleId":"37","severity":1,"message":"38","line":5,"column":23,"nodeType":"39","messageId":"40","endLine":5,"endColumn":34},{"ruleId":"41","severity":1,"message":"42","line":36,"column":25,"nodeType":"43","endLine":36,"endColumn":96},"no-unused-vars","'useDispatch' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]