[{"/mnt/c/Users/Cristian/desktop/projects/reddit-client/src/features/posts/Posts.js":"1","/mnt/c/Users/Cristian/desktop/projects/reddit-client/src/features/posts/comments/Comments.js":"2","/mnt/c/Users/Cristian/desktop/projects/reddit-client/src/features/posts/postFooter/PostFooter.js":"3","/mnt/c/Users/Cristian/desktop/projects/reddit-client/src/features/header/searchBar/SearchBar.js":"4","/mnt/c/Users/Cristian/desktop/projects/reddit-client/src/features/header/Header.js":"5"},{"size":3226,"mtime":1607444830915,"results":"6","hashOfConfig":"7"},{"size":1199,"mtime":1607444302969,"results":"8","hashOfConfig":"7"},{"size":2726,"mtime":1607442783184,"results":"9","hashOfConfig":"7"},{"size":682,"mtime":1607436736030,"results":"10","hashOfConfig":"7"},{"size":628,"mtime":1607437256610,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},"1n8s2ol",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/mnt/c/Users/Cristian/desktop/projects/reddit-client/src/features/posts/Posts.js",["23","24","25","26"],"import React from 'react';\r\nimport styles from './Posts.module.css';\r\n\r\nimport { useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { getSubredditPosts } from '../../app/Reddit';\r\n\r\n\r\nimport { PostFooter } from './postFooter/PostFooter';\r\n\r\n\r\n\r\nexport const Posts = () => {\r\n    const activeSub = useSelector(state => state.subreddits.activeSubreddit);\r\n    const dispatch = useDispatch();\r\n\r\n    const [posts, setPosts] = useState([]);\r\n\r\n    useEffect(() => getSubredditPosts(activeSub)\r\n        .then(response => {\r\n            setPosts(response);\r\n        }), [activeSub]);\r\n\r\n\r\n\r\n    const [clicked, setClicked] = useState(true);\r\n\r\n    const upArrow = <svg stroke=\"currentColor\"\r\n        fill=\"currentColor\"\r\n        stroke-width=\"0\"\r\n        version=\"1.2\"\r\n        baseProfile=\"tiny\"\r\n        viewBox=\"0 0 24 24\"\r\n        className=\"icon-action\"\r\n        height=\"1.5rem\"\r\n        width=\"1.5rem\"\r\n        xmlns=\"http://www.w3.org/2000/svg\">\r\n        <path d=\"M12 21c-1.654 0-3-1.346-3-3v-4.764c-1.143 1.024-3.025.979-4.121-.115-1.17-1.169-1.17-3.073 0-4.242l7.121-7.121 7.121 7.121c1.17 1.169 1.17 3.073 0 4.242-1.094 1.095-2.979 1.14-4.121.115v4.764c0 1.654-1.346 3-3 3zm-1-12.586v9.586c0 .551.448 1 1 1s1-.449 1-1v-9.586l3.293 3.293c.379.378 1.035.378 1.414 0 .391-.391.391-1.023 0-1.414l-5.707-5.707-5.707 5.707c-.391.391-.391 1.023 0 1.414.379.378 1.035.378 1.414 0l3.293-3.293z\"></path>\r\n    </svg>\r\n\r\n    const downArrow = <svg stroke=\"currentColor\"\r\n        fill=\"currentColor\"\r\n        stroke-width=\"0\"\r\n        version=\"1.2\"\r\n        baseProfile=\"tiny\"\r\n        viewBox=\"0 0 24 24\"\r\n        className=\"icon-action\"\r\n        height=\"1.5rem\"\r\n        width=\"1.5rem\"\r\n        xmlns=\"http://www.w3.org/2000/svg\">\r\n        <path d=\"M12 21.312l-7.121-7.121c-1.17-1.17-1.17-3.073 0-4.242 1.094-1.094 2.978-1.138 4.121-.115v-4.834c0-1.654 1.346-3 3-3s3 1.346 3 3v4.834c1.143-1.023 3.027-.979 4.121.115 1.17 1.169 1.17 3.072 0 4.242l-7.121 7.121zm-5-10.242c-.268 0-.518.104-.707.293-.391.39-.391 1.023 0 1.414l5.707 5.707 5.707-5.707c.391-.391.391-1.024 0-1.414-.379-.379-1.035-.379-1.414 0l-3.293 3.293v-9.656c0-.551-.448-1-1-1s-1 .449-1 1v9.656l-3.293-3.293c-.189-.189-.439-.293-.707-.293z\"></path>\r\n    </svg>\r\n\r\n\r\n    return (\r\n        <section className={styles.posts}>\r\n            {posts.map(post => (\r\n                <section className={styles.post} key={post.id}>\r\n                    <div className={styles.likes}>\r\n                        {upArrow}\r\n                        <p>{post.ups}</p>\r\n                        {downArrow}\r\n                    </div>\r\n\r\n                    <div className={styles.postBody}>\r\n                        <h2>{post.title}</h2>\r\n                        <img src={post.url} onError={(e) => e.target.style.display = \"none\"} />\r\n                        <PostFooter postId={post.id}\r\n                            postAuthor={post.author}\r\n                            postCreated={post.created_utc}\r\n                            postPermalink={post.permalink}\r\n                            postComments={post.num_comments} />\r\n                    </div>\r\n                </section>\r\n\r\n            ))}\r\n        </section>\r\n    );\r\n}","/mnt/c/Users/Cristian/desktop/projects/reddit-client/src/features/posts/comments/Comments.js",[],"/mnt/c/Users/Cristian/desktop/projects/reddit-client/src/features/posts/postFooter/PostFooter.js",[],"/mnt/c/Users/Cristian/desktop/projects/reddit-client/src/features/header/searchBar/SearchBar.js",[],"/mnt/c/Users/Cristian/desktop/projects/reddit-client/src/features/header/Header.js",[],{"ruleId":"27","severity":1,"message":"28","line":16,"column":11,"nodeType":"29","messageId":"30","endLine":16,"endColumn":19},{"ruleId":"27","severity":1,"message":"31","line":27,"column":12,"nodeType":"29","messageId":"30","endLine":27,"endColumn":19},{"ruleId":"27","severity":1,"message":"32","line":27,"column":21,"nodeType":"29","messageId":"30","endLine":27,"endColumn":31},{"ruleId":"33","severity":1,"message":"34","line":68,"column":25,"nodeType":"35","endLine":68,"endColumn":96},"no-unused-vars","'dispatch' is assigned a value but never used.","Identifier","unusedVar","'clicked' is assigned a value but never used.","'setClicked' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]