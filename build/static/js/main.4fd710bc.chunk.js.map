{"version":3,"sources":["features/posts/comments/Comments.module.css","features/posts/Posts.module.css","features/posts/individualPost/IndividualPost.module.css","features/posts/likes/Likes.module.css","features/header/Header.module.css","features/posts/postFooter/PostFooter.module.css","features/subredditsDropdown/SubredditsDropdown.module.css","features/subreddits/subreddits.module.css","features/header/searchBar/SearchBar.module.css","redditLogo.png","logo.svg","features/subreddits/subredditsSlice.js","features/header/searchBar/searchBarSlice.js","features/header/searchBar/SearchBar.js","features/header/Header.js","app/Reddit.js","features/posts/comments/Comments.js","features/posts/postFooter/PostFooter.js","app/utils.js","features/posts/likes/Likes.js","features/posts/individualPost/individualPostSlice.js","features/subredditsDropdown/SubredditsDropdown.js","features/posts/Posts.js","features/posts/individualPost/IndividualPost.js","features/subreddits/Subreddits.js","features/posts/postsSlice.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["module","exports","subredditsSlice","createSlice","name","initialState","subReddits","activeSubreddit","reducers","addSubreddit","state","action","push","payload","changeActiveSubreddit","actions","searchBarSlice","changeActiveSearch","SearchBar","dispatch","useDispatch","activeSubSliced","useSelector","subreddits","slice","searchBarValue","search","className","styles","searchBar","id","value","placeholder","onChange","e","target","Header","mainHeader","to","onClick","API_ROOT","getSubredditPosts","subreddit","a","fetch","response","json","data","children","map","post","getSubreddits","getPostComments","permalink","Comments","props","useState","comments","setComments","useEffect","then","jsonComments","comment","commentHeader","commentAuthor","author","commentDate","dateCalculator","created_utc","body","visible","isShown","isNotShown","created","dateDifferenceInTime","Date","now","dateDifferenceInMonths","dateDifferenceInDays","dateDifferenceInHours","dateDifferenceInMinutes","Math","round","PostFooter","active","setActive","commentsIcon","stroke","fill","strokeWidth","version","baseProfile","viewBox","height","width","xmlns","d","postInfos","postAuthor","postCreated","postComments","document","getElementById","postId","style","display","postPermalink","upArrow","aria-hidden","downArrow","backArrow","focusable","x","y","Likes","likes","firstChild","getAttribute","setAttribute","parentNode","lastChild","color","upVotesButton","postUps","individualPostSlice","changeActivePostId","SubredditsDropdown","subs","activeSub","onOptionSelected","subSelector","sub","url","Posts","activeSearchInput","posts","filteredPosts","filter","title","toLowerCase","includes","ups","postBody","selftext","substring","length","readMore","src","onError","num_comments","IndividualPost","activePostId","individualPostId","selectedPost","goBack","Subreddits","forEach","item","display_name","icon","community_icon","split","undefined","logo","postsSlice","changePosts","App","exact","path","redditLogo","configureStore","reducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4fd710bc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"comment\":\"Comments_comment__1ZLiw\",\"commentAuthor\":\"Comments_commentAuthor__27R81\",\"isNotShown\":\"Comments_isNotShown__2xTd0\",\"commentHeader\":\"Comments_commentHeader__1EAnF\",\"commentDate\":\"Comments_commentDate__30AYo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"Posts_posts__3L4wU\",\"post\":\"Posts_post__EC1dO\",\"postBody\":\"Posts_postBody__H6rN4\",\"readMore\":\"Posts_readMore__18MkM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"IndividualPost_posts__21OZ_\",\"post\":\"IndividualPost_post__avrts\",\"postBody\":\"IndividualPost_postBody__Zt-Y_\",\"readMore\":\"IndividualPost_readMore__hZceE\",\"goBack\":\"IndividualPost_goBack__1oNll\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"likes\":\"Likes_likes__1tY2J\",\"upVotesButton\":\"Likes_upVotesButton__u0XEb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainHeader\":\"Header_mainHeader__3hQCZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postInfos\":\"PostFooter_postInfos__1O4mB\",\"commentsIcon\":\"PostFooter_commentsIcon__3Vwoy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"subSelector\":\"SubredditsDropdown_subSelector__3VoXN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"subreddits\":\"subreddits_subreddits__2IY1U\",\"activeSub\":\"subreddits_activeSub__zwtlP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchBar\":\"SearchBar_searchBar__PXXdk\"};","export default __webpack_public_path__ + \"static/media/redditLogo.eca27489.png\";","export default __webpack_public_path__ + \"static/media/logo.db36153e.svg\";","import { createSlice } from '@reduxjs/toolkit';\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst subredditsSlice = createSlice({\r\n    name: \"subreddits\",\r\n    initialState: { \r\n       subReddits: [],\r\n       activeSubreddit: \"/r/Home/\"\r\n    },\r\n    reducers: {\r\n        addSubreddit: (state, action) => {\r\n            state.subReddits.push(action.payload);\r\n        },\r\n\r\n        changeActiveSubreddit: (state, action) => {\r\n            state.activeSubreddit = action.payload;\r\n        }\r\n    }\r\n});\r\n\r\nexport const {addSubreddit, changeActiveSubreddit} = subredditsSlice.actions;\r\nexport default subredditsSlice.reducer;\r\n\r\n\r\n/* when the application runs ->\r\n    add every subreddit to the store ->\r\n        add every subreddit to the subreddits category so they can be used as filters */","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const searchBarSlice = createSlice({\r\n    name: \"search\",\r\n    initialState: \"\",\r\n    reducers: {\r\n        changeActiveSearch: (state, action) => state = action.payload,\r\n    }\r\n});\r\n\r\nexport const { changeActiveSearch } = searchBarSlice.actions;\r\nexport default searchBarSlice.reducer;","import React from 'react';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\n\r\nimport styles from './SearchBar.module.css';\r\n\r\nimport {changeActiveSearch} from './searchBarSlice';\r\n\r\nexport const SearchBar = () => {\r\n    const dispatch = useDispatch();\r\n    \r\n    const activeSubSliced = useSelector(state => state.subreddits.activeSubreddit).slice(3, -1);\r\n    const searchBarValue = useSelector(state => state.search);\r\n    \r\n    const onTextChange = (e) => {\r\n        dispatch(changeActiveSearch(e.target.value));\r\n    }\r\n\r\n    return (\r\n        <input className={styles.searchBar}\r\n            id=\"Search\"\r\n            value={searchBarValue}\r\n            placeholder={\"Search posts in \" + activeSubSliced}\r\n            onChange={onTextChange}\r\n        />\r\n    );\r\n};","import React from 'react';\r\nimport styles from './Header.module.css';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport { useDispatch } from 'react-redux';\r\nimport { changeActiveSubreddit } from '../subreddits/subredditsSlice';\r\n\r\nimport { SearchBar } from './searchBar/SearchBar';\r\n\r\nexport const Header = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const onTitleClicked = () => {\r\n        dispatch(changeActiveSubreddit(\"/r/Home/\"));\r\n    }\r\n\r\n    return (\r\n        <header className={styles.mainHeader}>\r\n            <Link to=\"/\">\r\n                <h1 onClick={onTitleClicked}>Reddit<span>Minimal</span></h1>\r\n            </Link>\r\n            <SearchBar className={styles.searchBar} />\r\n        </header>\r\n    );\r\n}","import React from 'react';\r\n\r\n\r\nexport const API_ROOT = 'https://www.reddit.com';\r\n\r\nexport const getSubredditPosts = async (subreddit) => {\r\n  const response = await fetch(`${API_ROOT}${subreddit}.json`);\r\n  const json = await response.json();\r\n\r\n  return json.data.children.map((post) => post.data);\r\n};\r\n\r\nexport const getSubreddits = async () => {\r\n  const response = await fetch(`${API_ROOT}/subreddits.json`);\r\n  const json = await response.json();\r\n\r\n  return json.data.children.map((subreddit) => subreddit.data);\r\n  \r\n};\r\n\r\nexport const getPostComments = async (permalink) => {\r\n  const response = await fetch(`${API_ROOT}${permalink}.json`);\r\n  const json = await response.json();\r\n\r\n  return json[1].data.children.map((subreddit) => subreddit.data);\r\n};\r\n","import React from 'react';\r\nimport { useState, useEffect } from 'react';\r\n\r\nimport styles from './Comments.module.css';\r\n\r\nimport { getPostComments } from '../../../app/Reddit';\r\nimport { dateCalculator } from '../postFooter/PostFooter';\r\n\r\nexport const Comments = (props) => {\r\n    const [comments, setComments] = useState([]);\r\n\r\n    useEffect(() => {\r\n        getPostComments(props.permalink)\r\n            .then(jsonComments => setComments(\r\n                jsonComments.map(comment => (\r\n\r\n                    <div className={styles.comment} key={comment.id}>\r\n                        <div className={styles.commentHeader}>\r\n                            <p className={styles.commentAuthor}>{comment.author}</p>\r\n                            <p className={styles.commentDate}>{dateCalculator(comment.created_utc)}</p>\r\n                        </div>\r\n                        <p>{comment.body}</p>\r\n                    </div>\r\n\r\n                ))));\r\n\r\n    }, [props.permalink]);\r\n\r\n    return (\r\n        <div id={props.id} className={props.visible === true ? styles.isShown : styles.isNotShown}>\r\n            {comments}\r\n        </div>\r\n    );\r\n};\r\n\r\n//{console.log(JSON.stringify(comment))}","import React from 'react';\r\nimport { useState } from 'react';\r\n\r\nimport { Comments } from '../comments/Comments';\r\n\r\nimport styles from './PostFooter.module.css';\r\n\r\nexport const dateCalculator = (created) => {\r\n    const currentDate = Date.now();\r\n    const postDate = new Date(created * 1000);\r\n\r\n    const dateDifferenceInTime = currentDate - postDate;\r\n\r\n    const dateDifferenceInMonths = dateDifferenceInTime / (1000 * 3600 * 24 * 30.4);\r\n    const dateDifferenceInDays = dateDifferenceInTime / (1000 * 3600 * 24);\r\n    const dateDifferenceInHours = dateDifferenceInTime / (1000 * 3600);\r\n    const dateDifferenceInMinutes = dateDifferenceInTime / (1000 * 60);\r\n\r\n    if (dateDifferenceInMonths > 12) {\r\n        return \"more than a year ago\";\r\n    } else if (dateDifferenceInMonths >= 1) {\r\n        return Math.round(dateDifferenceInMonths) + \" months ago\";\r\n    } else if (dateDifferenceInDays >= 1) {\r\n        return Math.round(dateDifferenceInDays) + \" days ago\";\r\n    } else if (dateDifferenceInHours >= 1) {\r\n        return Math.round(dateDifferenceInHours) + \" hours ago\";\r\n    } else if (dateDifferenceInMinutes >= 1) {\r\n        return Math.round(dateDifferenceInMinutes) + \" minutes ago\";\r\n    } else {\r\n        return \"less than a minute ago\";\r\n    }\r\n}\r\n\r\n\r\nexport const PostFooter = (props) => {\r\n    const [active, setActive] = useState(false);\r\n\r\n    const commentsIcon = <svg\r\n        stroke=\"currentColor\"\r\n        fill=\"currentColor\"\r\n        strokeWidth=\"0\"\r\n        version=\"1.2\"\r\n        baseProfile=\"tiny\"\r\n        viewBox=\"0 0 24 24\"\r\n        className=\"icon-action\"\r\n        height=\"1.5rem\"\r\n        width=\"1.5rem\"\r\n        xmlns=\"http://www.w3.org/2000/svg\">\r\n        <path d=\"M18 7c.542 0 1 .458 1 1v7c0 .542-.458 1-1 1h-8.829l-.171.171v-.171h-3c-.542 0-1-.458-1-1v-7c0-.542.458-1 1-1h12m0-2h-12c-1.65 0-3 1.35-3 3v7c0 1.65 1.35 3 3 3h1v3l3-3h8c1.65 0 3-1.35 3-3v-7c0-1.65-1.35-3-3-3z\"></path>\r\n    </svg>;\r\n\r\n    const onCommentsClicked = () => {\r\n        const postComments = document.getElementById(props.postId);\r\n        if (active) {\r\n            postComments.style.display = \"none\";\r\n            setActive(false);\r\n        } else {\r\n            postComments.style.display = \"block\";\r\n            setActive(true);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <footer>\r\n            <ul className={styles.postInfos}>\r\n                <li><span>{props.postAuthor}</span></li>\r\n                <li>{dateCalculator(props.postCreated)}</li>\r\n                <li onClick={onCommentsClicked} className={styles.commentsIcon}>{commentsIcon}<span>{props.postComments}</span></li>\r\n            </ul>\r\n            <Comments permalink={props.postPermalink}\r\n                id={props.postId}\r\n                visible={props.visible}\r\n            />\r\n        </footer>\r\n    );\r\n};","export const upArrow = <svg stroke=\"green\"\r\n    fill=\"black\"\r\n    aria-hidden=\"true\"\r\n    strokeWidth=\"0\"\r\n    version=\"1.2\"\r\n    baseProfile=\"tiny\"\r\n    viewBox=\"0 0 24 24\"\r\n    height=\"1.5rem\"\r\n    width=\"1.5rem\"\r\n    xmlns=\"http://www.w3.org/2000/svg\">\r\n    <path d=\"M12 21c-1.654 0-3-1.346-3-3v-4.764c-1.143 1.024-3.025.979-4.121-.115-1.17-1.169-1.17-3.073 0-4.242l7.121-7.121 7.121 7.121c1.17 1.169 1.17 3.073 0 4.242-1.094 1.095-2.979 1.14-4.121.115v4.764c0 1.654-1.346 3-3 3zm-1-12.586v9.586c0 .551.448 1 1 1s1-.449 1-1v-9.586l3.293 3.293c.379.378 1.035.378 1.414 0 .391-.391.391-1.023 0-1.414l-5.707-5.707-5.707 5.707c-.391.391-.391 1.023 0 1.414.379.378 1.035.378 1.414 0l3.293-3.293z\"></path>\r\n</svg>\r\n\r\nexport const downArrow = <svg stroke=\"red\"\r\n    fill=\"black\"\r\n    aria-hidden=\"true\"\r\n    strokeWidth=\"0\"\r\n    version=\"1.2\"\r\n    baseProfile=\"tiny\"\r\n    viewBox=\"0 0 24 24\"\r\n    height=\"1.5rem\"\r\n    width=\"1.5rem\"\r\n    xmlns=\"http://www.w3.org/2000/svg\">\r\n    <path d=\"M12 21.312l-7.121-7.121c-1.17-1.17-1.17-3.073 0-4.242 1.094-1.094 2.978-1.138 4.121-.115v-4.834c0-1.654 1.346-3 3-3s3 1.346 3 3v4.834c1.143-1.023 3.027-.979 4.121.115 1.17 1.169 1.17 3.072 0 4.242l-7.121 7.121zm-5-10.242c-.268 0-.518.104-.707.293-.391.39-.391 1.023 0 1.414l5.707 5.707 5.707-5.707c.391-.391.391-1.024 0-1.414-.379-.379-1.035-.379-1.414 0l-3.293 3.293v-9.656c0-.551-.448-1-1-1s-1 .449-1 1v9.656l-3.293-3.293c-.189-.189-.439-.293-.707-.293z\"></path>\r\n</svg>\r\n\r\nexport const backArrow = <svg xmlns=\"http://www.w3.org/2000/svg\"\r\n    aria-hidden=\"true\"\r\n    focusable=\"false\"\r\n    width=\"1em\"\r\n    height=\"1em\"\r\n    viewBox=\"0 0 24 20\">\r\n    <path d=\"M21 11H6.414l5.293-5.293l-1.414-1.414L2.586 12l7.707 7.707l1.414-1.414L6.414 13H21z\"\r\n        fill=\"black\" /><rect x=\"0\" y=\"0\"\r\n            width=\"24\"\r\n            height=\"24\"\r\n            fill=\"rgba(0, 0, 0, 0)\"\r\n    />\r\n</svg>","import React from 'react';\r\n\r\nimport styles from './Likes.module.css';\r\nimport { upArrow, downArrow } from '../../../app/utils';\r\n\r\nexport const Likes = (props) => {\r\n    const onUpArrowClicked = (e) => {\r\n        if (e.target.firstChild.getAttribute(\"fill\") === \"black\") {         //set the arrow color, revert the opposite arrow color and change the votes number color\r\n            e.target.firstChild.setAttribute(\"fill\", \"green\");\r\n            e.target.parentNode.lastChild.firstChild.setAttribute(\"fill\", \"black\");\r\n            e.target.parentNode.children[1].style.color = \"green\";\r\n        } else {\r\n            e.target.firstChild.setAttribute(\"fill\", \"black\");              //set the arrow color and revert the votes number color\r\n            e.target.parentNode.children[1].style.color = \"black\";\r\n        }\r\n    }\r\n\r\n    const onDownArrowClicked = (e) => {\r\n        if (e.target.firstChild.getAttribute(\"fill\") === \"black\") {         //set the arrow color, revert the opposite arrow color and change the votes number color\r\n            e.target.firstChild.setAttribute(\"fill\", \"red\");\r\n            e.target.parentNode.firstChild.firstChild.setAttribute(\"fill\", \"black\");\r\n            e.target.parentNode.children[1].style.color = \"red\";\r\n        } else {\r\n            e.target.firstChild.setAttribute(\"fill\", \"black\");              //set the arrow color and revert the votes number color\r\n            e.target.parentNode.children[1].style.color = \"black\";\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <div className={styles.likes}>\r\n            <div onClick={onUpArrowClicked} className={styles.upVotesButton}>{upArrow}</div>\r\n            <p>{props.postUps >= 1000 ? (Math.round(props.postUps / 1000 * 10) / 10 + \"k\") : props.postUps}</p>\r\n            <div onClick={onDownArrowClicked} className={styles.upVotesButton}>{downArrow}</div>\r\n        </div>\r\n    );\r\n}","import {createSlice} from '@reduxjs/toolkit';\r\n\r\nconst individualPostSlice = createSlice({\r\n    name: \"individualPostId\",\r\n    initialState: \"\",\r\n    reducers: {\r\n        changeActivePostId: (state, action) => state = action.payload \r\n    }\r\n});\r\n\r\nexport default individualPostSlice.reducer;\r\nexport const {changeActivePostId} = individualPostSlice.actions;","import React, { useEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport styles from './SubredditsDropdown.module.css';\r\nimport { Link } from 'react-router-dom';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { addSubreddit, changeActiveSubreddit } from '../subreddits/subredditsSlice';\r\n\r\nexport const SubredditsDropdown = (props) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const activeSub = useSelector(state => state.subreddits.activeSubreddit);\r\n    const subReddits = useSelector(state => state.subreddits.subReddits);\r\n\r\n    const onOptionSelected = (e) => {\r\n        dispatch(changeActiveSubreddit(e.target.value));\r\n    }\r\n\r\n\r\n    const dropdown = (subs) => {\r\n        return (\r\n            <select\r\n                className={styles.subSelector}\r\n                value={activeSub}\r\n                onChange={onOptionSelected}>\r\n                {subs.map(sub => (\r\n                    <option key={sub.id} value={sub.url}>{sub.name}</option>\r\n                ))}\r\n            </select>\r\n        );\r\n    };\r\n\r\n\r\n    return (\r\n        <section className={styles.subreddits}>\r\n            {dropdown(subReddits)}\r\n        </section>\r\n    );\r\n}","import React from 'react';\r\nimport styles from './Posts.module.css';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\n\r\nimport { PostFooter } from './postFooter/PostFooter';\r\nimport { Likes } from './likes/Likes';\r\nimport {changeActivePostId} from './individualPost/individualPostSlice';\r\nimport {SubredditsDropdown} from '../subredditsDropdown/SubredditsDropdown';\r\n\r\n\r\n\r\nexport const Posts = () => {\r\n    const activeSearchInput = useSelector(state => state.search);\r\n    const posts = useSelector(state => state.posts);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const filteredPosts = posts.filter(post => post.title.toLowerCase().includes(activeSearchInput.toLowerCase()));     //select only posts that include the search bar value\r\n\r\n    return (\r\n        <section className={styles.posts}>\r\n             <SubredditsDropdown />\r\n            {filteredPosts.map(post => (\r\n\r\n                <section className={styles.post} key={post.id}>\r\n                    <Likes postUps={post.ups} />\r\n\r\n                    <div className={styles.postBody}>\r\n                        <Link to={\"/individualPost\"} onClick={() => dispatch(changeActivePostId(post.name))}>\r\n                            <h2>{post.title}</h2>\r\n                            <p>{post.selftext.substring(0, 600) + (post.selftext.length > 600 ? \" [...]\" : \"\")}</p>\r\n                            {post.selftext.length > 600 ? <p className={styles.readMore}>read more...</p> : null}\r\n                            <img src={post.url} onError={(e) => e.target.style.display = \"none\"} />\r\n                        </Link>\r\n                        <PostFooter postId={post.id}\r\n                            postAuthor={post.author}\r\n                            postCreated={post.created_utc}\r\n                            postPermalink={post.permalink}\r\n                            postComments={post.num_comments}\r\n                            visible={false}\r\n                        />\r\n                    </div>\r\n                </section>\r\n\r\n            ))}\r\n        </section>\r\n    );\r\n}","import React from 'react';\r\nimport styles from './IndividualPost.module.css';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\n\r\nimport { PostFooter } from '../postFooter/PostFooter';\r\nimport { Likes } from '../likes/Likes';\r\nimport { Link } from 'react-router-dom';\r\nimport {backArrow} from '../../../app/utils';\r\n\r\n\r\n\r\nexport const IndividualPost = () => {\r\n    const posts = useSelector(state => state.posts);\r\n    const activePostId = useSelector(state => state.individualPostId);\r\n\r\n    const selectedPost = posts.filter(post => post.name === activePostId);\r\n\r\n    return (\r\n        <section className={styles.posts}>\r\n            <Link to=\"/\"><button className={styles.goBack}>{backArrow} Go back to all posts</button></Link>\r\n            {selectedPost.map(post => (\r\n\r\n                <section className={styles.post} key={post.id}>\r\n                    <Likes postUps={post.ups} />\r\n\r\n                    <div className={styles.postBody}>\r\n                        <h2>{post.title}</h2>\r\n                        <p>{post.selftext}</p>\r\n                        <img src={post.url} onError={(e) => e.target.style.display = \"none\"} />\r\n\r\n                        <PostFooter postId={post.id}\r\n                            postAuthor={post.author}\r\n                            postCreated={post.created_utc}\r\n                            postPermalink={post.permalink}\r\n                            postComments={post.num_comments}\r\n                            visible={true}\r\n                        />\r\n                    </div>\r\n                </section>\r\n\r\n            ))}\r\n        </section>\r\n    );\r\n}","import React from 'react';\r\nimport styles from './subreddits.module.css';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { getSubreddits } from '../../app/Reddit';\r\nimport { addSubreddit, changeActiveSubreddit } from './subredditsSlice';\r\n\r\n\r\n\r\n\r\nexport const Subreddits = (props) => {\r\n    const activeSub = useSelector(state => state.subreddits.activeSubreddit);\r\n    const subReddits = useSelector(state => state.subreddits.subReddits);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => getSubreddits().then(json => {\r\n        json.forEach(item => dispatch(\r\n            addSubreddit({\r\n                name: item.display_name,\r\n                url: item.url,\r\n                id: item.id,\r\n                icon: item.community_icon.split(\"?\")[0],\r\n            })));\r\n    }), [dispatch]);\r\n\r\n\r\n    return (\r\n        <section className={styles.subreddits}>\r\n            <ul>\r\n                {subReddits.map(item => (\r\n                    <Link to=\"/\" key={item.id}>\r\n                        <li \r\n                            onClick={() => dispatch(changeActiveSubreddit(item.url))}\r\n                            className={activeSub === item.url ? styles.activeSub : undefined}\r\n                        >\r\n                            <img src={item.icon} onError={(e) => e.target.src = props.logo} />\r\n                            {item.name}\r\n                        </li>\r\n                    </Link>\r\n                ))}\r\n            </ul>\r\n        </section>\r\n    );\r\n}\r\n\r\n\r\n/*\r\nconst images = document.querySelectorAll('.subreddits ul li img');\r\n\r\nimages.forEach(image => {\r\n    !image.complete ? image.src = \"../../assets/images/redditLogo.png\" : image.src = \"../../assets/images/redditLogo.png\";\r\n}); */","import {createSlice} from '@reduxjs/toolkit';\r\n\r\nconst postsSlice = createSlice({\r\n    name: \"posts\",\r\n    initialState: [],\r\n    reducers: {\r\n        changePosts: (state, action) => state = action.payload\r\n    }\r\n\r\n});\r\n\r\nexport default postsSlice.reducer;\r\nexport const {changePosts} = postsSlice.actions;","import React from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useEffect } from 'react';\r\n\r\nimport logo from './logo.svg';\r\nimport redditLogo from './redditLogo.png';\r\nimport './App.css';\r\n\r\nimport { Header } from './features/header/Header';\r\nimport { Posts } from './features/posts/Posts';\r\nimport { IndividualPost } from './features/posts/individualPost/IndividualPost';\r\nimport { Subreddits } from './features/subreddits/Subreddits';\r\n\r\nimport { getSubredditPosts } from './app/Reddit';\r\nimport { changePosts } from './features/posts/postsSlice';\r\n\r\nfunction App() {\r\n\r\n  const activeSub = useSelector(state => state.subreddits.activeSubreddit);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => getSubredditPosts(activeSub)\r\n    .then(response => {\r\n      dispatch(changePosts(response));\r\n    }), [activeSub]);\r\n\r\n\r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <Header/>\r\n        <main>\r\n         \r\n          <Switch>\r\n            <Route exact path=\"/individualPost\">\r\n              <IndividualPost />\r\n            </Route>\r\n            <Route exact path=\"/\">\r\n              <Posts />\r\n            </Route>\r\n          </Switch>\r\n\r\n          <Subreddits logo={redditLogo} />\r\n        </main>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport searchBarSlice from '../features/header/searchBar/searchBarSlice';\r\nimport subredditsSlice from '../features/subreddits/subredditsSlice';\r\nimport individualPostSlice from '../features/posts/individualPost/individualPostSlice';\r\nimport postsSlice from '../features/posts/postsSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    search: searchBarSlice,\r\n    posts: postsSlice,\r\n    subreddits: subredditsSlice,\r\n    individualPostId: individualPostSlice\r\n  }\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}